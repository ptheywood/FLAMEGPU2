# Compile project on Windows
name: Windows

on:
  push:
    branches:
      - '**'
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Windows.yml"
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.cudacxx.os }}
    strategy:
      fail-fast: false
      # Multiplicative build matrix
      # optional exclude: can be partial, include: must be specific
      matrix:
        cudacxx:
          - cuda: "11.4.1"
            cuda_arch: "35"
            hostcxx: "Visual Studio 16 2019"
            os: windows-2019
          - cuda: "11.0.3"
            cuda_arch: "35"
            hostcxx: "Visual Studio 16 2019"
            os: windows-2019
        python: 
          - "3.8"
        config:
          - name: "Release"
            config: "Release"
            SEATBELTS: "ON"
        VISUALISATION: 
          - "ON"
          - "OFF"

    # Name the job based on matrix/env options
    name: "build (${{ matrix.cudacxx.cuda }}, ${{matrix.python}}, ${{ matrix.VISUALISATION }}, ${{ matrix.config.name }}, ${{ matrix.cudacxx.os }})"

    # Define job-wide env constants, and promote matrix elements to env constants for portable steps.
    env:
      # Workflow specific constants for building a specific example
      INDIVIDUAL_EXAMPLE: "game_of_life"
      # Define constants
      BUILD_DIR: "build"
      BUILD_TESTS: "OFF"
      # Conditional based on matrix via awkward almost ternary
      BUILD_SWIG_PYTHON: ${{ fromJSON('{true:"ON",false:"OFF"}')[matrix.python != ''] }}
      # Port matrix options to environment, for more portability.
      CUDA: ${{ matrix.cudacxx.cuda }}
      CUDA_ARCH: ${{ matrix.cudacxx.cuda_arch }}
      HOSTCXX: ${{ matrix.cudacxx.hostcxx }}
      OS: ${{ matrix.cudacxx.os }}
      CONFIG: ${{ matrix.config.config }}
      SEATBELTS: ${{ matrix.config.SEATBELTS }}
      PYTHON: ${{ matrix.python}}
      VISUALISATION: ${{ matrix.VISUALISATION }}


    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA (Windows)
      if: ${{ runner.os == 'Windows' && env.CUDA != '' }}
      shell: powershell
      env:
        cuda: ${{ env.CUDA }}
        visual_studio: ${{ env.HOSTCXX }}
      run: .github\scripts\install_cuda_windows.ps1

    # Must pass -G -A for windows, and -DPython3_ROOT_DIR/-DPYTHON3_EXECUTABLE as a github action workaround
    - name: Configure cmake
      run: >
        cmake . -B "${{ env.BUILD_DIR }}" 
        -G "${{ env.HOSTCXX }}" -A x64
        -Werror=dev
        -DCMAKE_WARN_DEPRECATED="OFF"
        -DWARNINGS_AS_ERRORS="ON"
        -DCUDA_ARCH="${{ env.CUDA_ARCH }}"
        -DBUILD_TESTS="${{ env.BUILD_TESTS }}"
        -DBUILD_SWIG_PYTHON="${{ env.BUILD_SWIG_PYTHON }}" 
        -DPython3_ROOT_DIR="$(dirname $(which python))" 
        -DPython3_EXECUTABLE="$(which python)"
        -DVISUALISATION="${{ env.VISUALISATION }}"
        -DUSE_NVTX="ON"

    - name: Build static library
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --config ${{ env.CONFIG }} --target flamegpu --verbose -j `nproc`

    - name: Build python wheel
      if: ${{ env.BUILD_SWIG_PYTHON == 'ON' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --config ${{ env.CONFIG }} --target pyflamegpu --verbose -j `nproc`

    - name: Build tests
      if: ${{ env.BUILD_TESTS == 'ON' }}
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --config ${{ env.CONFIG }} --target tests --verbose -j `nproc`

    - name: Build all remaining targets
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake --build . --config ${{ env.CONFIG }} --target ALL_BUILD --verbose -j `nproc`

    - name: Configure Individual example
      if: ${{ env.INDIVIDUAL_EXAMPLE != '' }}
      working-directory: examples/${{ env.INDIVIDUAL_EXAMPLE }}
      run: >
        cmake . -B "${{ env.BUILD_DIR }}" 
        -G "${{ env.HOSTCXX }}" -A x64
        -Werror=dev
        -DCMAKE_WARN_DEPRECATED="OFF"
        -DWARNINGS_AS_ERRORS="ON"
        -DCUDA_ARCH="${{ env.CUDA_ARCH }}"
        -DUSE_NVTX="ON"
    
    - name: Build Individual example
      if: ${{ env.INDIVIDUAL_EXAMPLE != '' }}
      working-directory: examples/${{ env.INDIVIDUAL_EXAMPLE }}/${{ env.BUILD_DIR }}
      run: cmake --build . --config ${{ env.CONFIG }} --target ${{ env.INDIVIDUAL_EXAMPLE }} --verbose -j `nproc`

